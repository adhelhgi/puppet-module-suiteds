<%-
  config = scope.to_hash
  config = scope.parent.to_hash if ! config.has_key?( 'servers' )

  map_hash = {}
  config['ldap_map'].each do |line|
    key, ou, desc, dbs, ns_on, ns_off, ldap_scope, filter = line.split( /:/ ).map{ |x| x.to_s.strip }
    map_hash[key] = {
      'ou'     => ou,
      'desc'   => desc,
      'dbs'    => dbs,
      'ns_on'  => ns_on,
      'ns_off' => ns_off,
      'scope'  => ldap_scope,
      'filter' => filter,
    }
  end
-%>
[libdefaults]
  default_realm = <%= config['default_domain'].to_s.upcase %>

  # The following krb5.conf variables are only for MIT Kerberos.
  krb4_config = /etc/krb.conf
  krb4_realms = /etc/krb.realms
  kdc_timesync = 1
  ccache_type = 4
  forwardable = true
  proxiable = true

# The following encryption type specification will be used by MIT Kerberos
# if uncommented.  In general, the defaults in the MIT Kerberos code are
# correct and overriding these specifications only serves to disable new
# encryption types as they are added, creating interoperability problems.
#
# Thie only time when you might need to uncomment these lines and change
# the enctypes is if you have local software that will break on ticket
# caches containing ticket encryption types it doesn't know about (such as
# old versions of Sun Java).

#	default_tgs_enctypes = des3-hmac-sha1
#	default_tkt_enctypes = des3-hmac-sha1
#	permitted_enctypes = des3-hmac-sha1

  # The following libdefaults parameters are only for Heimdal Kerberos.
  v4_instance_resolve = false
  v4_name_convert = {
    host = {
      rcmd = host
      ftp = ftp
    }
    plain = {
      something = something-else
    }
  }
  fcc-mit-ticketflags = true

[realms]
<%- [ config['domains'] ].flatten.each do |realm| -%>
  <%= realm.to_s.upcase %> = {
<%   [ config['servers'] ].flatten.each do |server| -%>
    kdc = <%= server.downcase %><%= ':' + config['krb5_port'] if config['krb5_port'] %>
    admin_server = <%= server.downcase %><%= ':' + config['krb5adm_port'] if config['krb5adm_port'] %>
<%   end -%>
    default_domain = <%= realm.to_s.downcase %>
    database_module = <%= realm.to_s.upcase %>
  }
<% end -%>

[domain_realm]
<%- [ config['domains'] ].flatten.each do |realm| -%>
  .<%= realm.to_s.downcase %> = <%= realm.to_s.upcase %>
  <%= realm.to_s.downcase %> = <%= realm.to_s.upcase %>
<% end -%>

[login]
  krb4_convert = true
  krb4_get_tickets = false

[dbmodules]
<%
  [ config['domains'] ].flatten.each do |realm|
    base_dn  = realm.to_s.downcase.split( '.' ).map{ |part| part = 'dc=' + part }.join( ',' )
    admin_dn = 'ou=' + map_hash['roles']['ou']     + ',' + base_dn
    krb_dn   = 'ou=' + map_hash['kerberos']['ou'] + ','  + base_dn
-%>
  <%= realm.to_s.upcase %> = {
    db_library                 = kldap
    ldap_kerberos_container_dn = "<%= krb_dn %>"
    ldap_kdc_dn                = "cn=<%= config['krb_read_user'] %>,<%= admin_dn %>"
    ldap_kadmind_dn            = "cn=<%= config['krb_write_user'] %>,<%= admin_dn %>"
    ldap_service_password_file = <%= config['krb_path'] + '/' + realm.to_s.downcase %>.keyfile
    ldap_servers               = <%= scope.function_template( 'suiteds/generate-remote-uris.erb' ) %>
    ldap_conns_per_server      = 5
  }
<% end -%>
