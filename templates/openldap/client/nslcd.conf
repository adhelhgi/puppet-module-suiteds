<%-
  config = scope.to_hash
  config = scope.parent.to_hash if ! config.has_key?( 'servers' )

  base_dn = config['default_domain'].split( '.' ).map{ |part| part = 'dc=' + part }.join( ',' )
-%>
# /etc/nslcd.conf
# nslcd configuration file. See nslcd.conf(5)
# for details.

# The user and group nslcd should run as.
uid nslcd
gid nslcd

# The location at which the LDAP server(s) should be reachable.
uri <%= scope.function_template( 'suiteds/generate-remote-uris.erb' ) %>

<% if config["ldap_version"] -%>
ldap_version <%= config["ldap_version"] %>
<% end -%>

# The search base that will be used for all queries.
base <%= base_dn %>

# The LDAP protocol version to use.
#ldap_version 3

# The DN to bind with for normal lookups.
binddn <%= base_dn %>
bindpw <%= config['admin_password'] %>

# The DN used for password modifications by root.
#rootpwmoddn cn=admin,dc=example,dc=com

# SSL options
<% if config['ssl_mode'] -%>
ssl <%= config['ssl_mode'] %>
<% end -%>
<% if config['ssl_verify_certs'] -%>
tls_reqcert <%= config['ssl_verify_certs'] %>
<% end -%>

# The search scope.
#scope sub

<%
  map_hash = {}
  config['ldap_map'].each do |line|
    key, ou, dbs, ldap_scope, filter = line.split( /:/ ).values_at( 0, 1, 3, 6, 7 ).map{ |x| x.to_s.strip }
    map_hash[key] = {
      'ou'     => ou,
      'dbs'    => dbs,
      'scope'  => ldap_scope,
      'filter' => filter,
    }
  end

  host_access_groups = config['host_access_groups'].to_a.flatten
  host_access_groups.map!{ |x|
    x = '(memberOf=cn=' + x + ',ou=' + map_hash['access']['ou'] + ',' + base_dn + ')'
  }
  host_access_filter = host_access_groups.join()
  if host_access_groups.count > 1
    host_access_filter = '(|' + host_access_filter + ')'
  end

  map_hash.each do |key, value|
    next if value['dbs'].to_s == ''
    value['scope'] = 'one' if value['scope'] == ''
    if key == 'users' and host_access_filter != ''
      if value['filter'] != ''
        value['filter'] = '(&' + value['filter'] + host_access_filter + ')'
      else
        value['filter'] = ldap_access_filter
      end
    end
    value['dbs'].split( /,/ ).each do |db|
      # This is a bit of a hack, but it is good enough for now.
      next if db == 'bootparams' or db == 'netmasks'
-%>
base <%= db %> <%= 'ou=' + value['ou'] + ',' + base_dn %>
scope <%= db %> <%= value['scope'] %>
<%    if value['filter'] != '' -%>
filter <%= db %> <%= value['filter'] %>
<%
      end
    end
  end
-%>

