<%- 
  config = scope.to_hash
  config = scope.parent.to_hash if ! config.has_key?( 'servers' )

  map_hash = {}
  config['ldap_map'].each do |line|
    key, ou, desc, dbs, ns_off, ns_on, ldap_scope, filter = line.split( /:/ ).map{ |x| x.to_s.strip }
    map_hash[key] = {
      'ou'     => ou,
      'desc'   => desc,
      'dbs'    => dbs,
      'ns_off' => ns_off,
      'ns_on'  => ns_on,
      'scope'  => ldap_scope,
      'filter' => filter,
    }
  end

  roles = {}
  config['ldap_roles'].to_a.flatten.map do |line|
    role, name, desc = line.split( ':' ).map{ |x| x.to_s.strip }
    roles[ role ] = {
      'name' => name,
      'desc' => desc || name,
    }
  end

  db_id = 0
  [ config['domains'] ].flatten.each do |domain|
    base_dn = domain.split( '.' ).map{ |part| part = 'dc=' + part }.join( ',' )
    db_id += 1
    directory = "#{config['ldap_path']}/#{domain}"
-%>
dn: olcDatabase=hdb,cn=config
objectClass: olcDatabaseConfig
objectClass: olcHdbConfig
olcDatabase: hdb
olcDbDirectory: <%= directory %>
olcSuffix: <%= base_dn %>
olcRootDN: <%= base_dn %>
olcRootPW: <%= scope.function_template( 'suiteds/encrypt-password.erb' ) %>
#olcSaslHost: <%= fqdn %>
#olcSaslRealm: <%= domain.upcase %>
#olcAuthzRegexp: "uid=([^/]*),cn=<%= domain %>,cn=GSSAPI,cn=auth" "uid=$1,ou=<%= map_hash['users']['ou'] + ',' + base_dn %>"
#olcAuthzRegexp: "uid=host/([^/]*),cn=<%= domain %>,cn=gssapi,cn=auth" "cn=$1,ou=<%= map_hash['hosts']['ou'] + ',' + base_dn %>"
olcAccess: to *
  by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage
  by ssf=<%= config['ssl_minimum'] %> dn.exact=<%= 'cn=' + roles['ldap-admin']['name'] + ',ou=' + map_hash['roles']['ou'] + ',' + base_dn %> manage
  by * break
olcAccess: to attrs=userPassword,shadowLastChange,krbPrincipalKey,userPKCS12
  by ssf=<%= config['ssl_minimum'] %> self write
  by ssf=<%= config['ssl_minimum'] %> dn.exact=<%= 'cn=' + roles['krb-write']['name'] + ',ou=' + map_hash['roles']['ou'] + ',' + base_dn %> write
  by ssf=<%= config['ssl_minimum'] %> dn.exact=<%= 'cn=' + roles['krb-read']['name']  + ',ou=' + map_hash['roles']['ou'] + ',' + base_dn %> read
  by ssf=<%= config['ssl_minimum'] %> anonymous auth
  by * none
olcAccess: to dn.one="<%= 'ou=' + map_hash['users']['ou'] + ',' + base_dn %>"
  by ssf=<%= config['ssl_minimum'] %> users read
  by ssf=<%= config['ssl_minimum'] %> anonymous auth
  by * none
olcAccess: to dn.base="<%= 'ou=' + map_hash['users']['ou'] + ',' + base_dn %>"
  by ssf=<%= config['ssl_minimum'] %> users read
  by ssf=<%= config['ssl_minimum'] %> anonymous auth
  by * none
olcAccess: to dn.one="<%= 'ou=' + map_hash['roles']['ou'] + ',' + base_dn %>"
  by ssf=<%= config['ssl_minimum'] %> users read
  by ssf=<%= config['ssl_minimum'] %> anonymous auth
  by * none
olcAccess: to dn.base="<%= 'ou=' + map_hash['roles']['ou'] + ',' + base_dn %>"
  by ssf=<%= config['ssl_minimum'] %> users read
  by ssf=<%= config['ssl_minimum'] %> anonymous auth
  by * none
olcAccess: to dn.subtree="<%= 'ou=' + map_hash['kerberos']['ou'] + ',' + base_dn %>"
  by ssf=<%= config['ssl_minimum'] %> dn.exact=<%= 'cn=' + config['krb_write_user'] + ',ou=' + map_hash['roles']['ou'] + ',' + base_dn %> write
  by ssf=<%= config['ssl_minimum'] %> dn.exact=<%= 'cn=' + config['krb_read_user']  + ',ou=' + map_hash['roles']['ou'] + ',' + base_dn %> read
  by * none
olcAccess: to dn.base="<%= base_dn %>" by ssf=<%= config['ssl_minimum'] %> * read
olcAccess: to * 
  by ssf=<%= config['ssl_minimum'] %> self write
  by ssf=<%= config['ssl_minimum'] %> users read
  by * none
olcDbConfig: set_cachesize 0 2097152 0
olcDbConfig: set_lk_max_objects 1500
olcDbConfig: set_lk_max_locks 1500
olcDbConfig: set_lk_max_lockers 1500
olcDbIndex: uid,gidNumber,sambasid,uidNumber,apple-generateduid,apple-group-memberguid,apple-ownerguid pres,eq
olcDbIndex: cn,sn,mail,givenName,memberUid,apple-group-realname,apple-realname pres,eq,approx,sub
olcDbIndex: objectClass,entryCSN,entryUUID,ou eq
olcDbIndex: krbPrincipalName eq,pres,sub
olcDbIndex: memberOf eq,pres
<% if config['servers'].length > 1 -%>
<% sid = 0 -%>
<% scope.function_template( 'suiteds/generate-remote-uris.erb' ).split( /\s+/ ).each do |uri| -%>
olcSyncRepl: rid=<%= sid += 1 %> provider=<%= uri %> binddn=<%= base_dn %> bindmethod=simple
  credentials=<%= password %> searchbase=<%= base_dn %> type=refreshAndPersist
  tls_reqcert=<%= config['ssl_verify_certs'] %> retry="5 5 300 5" timeout=1
<% end -%>
olcMonitoring: FALSE
olcLastMod: TRUE
olcMirrorMode: TRUE

dn: olcOverlay=syncprov,olcDatabase={<%= db_id %>}hdb,cn=config
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
<% end -%>

dn: olcOverlay=memberof,olcDatabase={<%= db_id %>}hdb,cn=config
objectClass: olcOverlayConfig
objectClass: olcMemberOf
objectClass: olcConfig
olcMemberOfRefInt: TRUE
olcMemberOfGroupOC: groupOfNames
olcMemberOfDangling: error
olcMemberOfMemberAD: member
olcMemberOfMemberOfAD: memberOf
olcOverlay: memberof
<%
  end
-%>
